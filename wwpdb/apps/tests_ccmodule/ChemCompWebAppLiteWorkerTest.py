##
# File:    ChemCompWebAppLiteWorkerTest.py
# Date:    25-Feb-2021
#
# Updates:
# 25-Feb-2021 wmb Testing some ligand lite operations migrated to the backend
##

__docformat__ = "restructuredtext en"
__author__ = "Weslley Morellato Bueno"
__email__ = "wbueno@ebi.ac.uk"
__license__ = "Creative Commons Attribution 3.0 Unported"
__version__ = "V1.0"

import json
import tempfile
import sys
import unittest
import os
import os.path
from pathlib import Path
from unittest.mock import Mock, MagicMock, patch

sessionsTopDir = tempfile.mkdtemp()
configInfo = {
    "SITE_ARCHIVE_STORAGE_PATH": tempfile.mkdtemp(),
    "SITE_PREFIX": "PDBE_LOCALHOST",
    "SITE_WEB_APPS_TOP_SESSIONS_PATH": sessionsTopDir,
    "SITE_WEB_APPS_SESSIONS_PATH": os.path.join(sessionsTopDir, "sessions"),
    "SITE_CC_APPS_PATH": tempfile.mkdtemp(),
    "SITE_CC_CVS_PATH": tempfile.mkdtemp(),
    "SITE_DB_PORT_NUMBER": 10,
}

configInfoMockConfig = {
    "return_value": configInfo,
}

configMock = MagicMock(**configInfoMockConfig)

sys.modules["wwpdb.utils.config.ConfigInfo"] = Mock(ConfigInfo=configMock)

from wwpdb.utils.config.ConfigInfo import ConfigInfo  # noqa: E402
from wwpdb.apps.ccmodule.utils.Exceptions import InvalidLigandIdError, InvalidDepositionIdError  # noqa: E402
from wwpdb.utils.session.WebRequest import InputRequest  # noqa: E402
from wwpdb.apps.ccmodule.webapp.ChemCompWebAppLite import ChemCompWebAppLiteWorker  # noqa: E402
from wwpdb.io.locator.PathInfo import PathInfo  # noqa: E402


class ReportFilesRequestTest(unittest.TestCase):
    """This class tests the API for requesting files generated by
    the chemical components report.

    """

    def setUp(self):
        self.__verbose = False
        self.__lfh = sys.stderr
        self.__topPath = os.getenv("WWPDB_CCMODULE_TOP_PATH")
        #
        # Create a request object and session directories for test cases
        #
        self.__reqObj = InputRequest(paramDict={}, verbose=self.__verbose, log=self.__lfh)
        self.__reqObj.setValue("WWPDB_SITE_ID", "PDBE_DEV")
        self.__reqObj.setValue("TopSessionPath", self.__topPath)
        self.__reqObj.setValue("TopPath", self.__topPath)
        self.__reqObj.setValue("identifier", "D_800001")

        self.__siteId = str(self.__reqObj.getValue("WWPDB_SITE_ID"))
        self.__cI = ConfigInfo(self.__siteId)
        self.__depositPath = Path(PathInfo().getDepositPath("D_800001")).parent

    def testGetReportInstanceSvg(self):
        self.__reqObj.setValue("source", "author")
        self.__reqObj.setValue("file", "1_A_F6R_501_.svg")

        # generating dummy svg file
        depid_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis")
        os.makedirs(depid_dir, exist_ok=True)

        with open(os.path.join(depid_dir, "1_A_F6R_501_.svg"), "w") as f:
            f.write("<svg></svg>")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["datafileName"], "1_A_F6R_501_.svg")
        self.assertEqual(rc._cD["datatype"], "image/svg+xml")
        self.assertEqual(rc._cD["datacontent"], b"<svg></svg>")

    def testGetReportReferenceGif(self):
        self.__reqObj.setValue("source", "ccd")
        self.__reqObj.setValue("file", "G6Q-noh.gif")
        self.__reqObj.setValue("ligid", "G6Q")

        # generating dummy gif file
        gif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "rfrnc_reports", "G6Q")
        os.makedirs(gif_dir, exist_ok=True)

        with open(os.path.join(gif_dir, "G6Q-noh.gif"), "w") as f:
            f.write("foo")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["datafileName"], "G6Q-noh.gif")
        self.assertEqual(rc._cD["datatype"], "image/gif")
        self.assertEqual(rc._cD["datacontent"], b"foo")

    def testGetReportCifFiles(self):
        self.__reqObj.setValue("source", "ccd")
        self.__reqObj.setValue("file", "G6Q_ideal.cif")
        self.__reqObj.setValue("ligid", "G6Q")

        # generating dummy cif file
        cif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "rfrnc_reports", "G6Q")
        os.makedirs(cif_dir, exist_ok=True)

        with open(os.path.join(cif_dir, "G6Q_ideal.cif"), "w") as f:
            f.write("data_2GC2")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["textcontent"], "data_2GC2")

        # now the cif for the instance
        self.__reqObj.setValue("source", "author")
        self.__reqObj.setValue("file", "F6R_model.cif")
        self.__reqObj.setValue("ligid", "1_A_F6R_501_")

        # generating dummy cif file
        cif_dir = os.path.join(self.__depositPath, "D_800001", "cc_analysis", "1_A_F6R_501_", "report")
        os.makedirs(cif_dir, exist_ok=True)

        with open(os.path.join(cif_dir, "F6R_model.cif"), "w") as f:
            f.write("data_2GC2")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["textcontent"], "data_2GC2")

    def testInvalidRequest(self):
        self.__reqObj.setValue("source", "ccd")
        self.__reqObj.setValue("ligid", "F6R")
        self.__reqObj.setValue("file", "../../../../../../../etc/passwd")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        print(rc._cD["textcontent"])
        self.assertEqual(rc._cD["errortext"], "File not found")
        self.assertEqual(rc._cD["statuscode"], 404)

        # ---

        self.__reqObj.setValue("source", "foo")
        self.__reqObj.setValue("file", "F6R_model.cif")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["errortext"], "Source should be either 'ccd', 'author' or 'report'")
        self.assertEqual(rc._cD["statuscode"], 400)

        # ---

        self.__reqObj.setValue("source", "ccd")
        self.__reqObj.setValue("file", "F6R_model$.cif")

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        rc = stw._getReportFile()

        self.assertEqual(rc._cD["errortext"], "File not found")
        self.assertEqual(rc._cD["statuscode"], 404)


class LigandSummaryTest(unittest.TestCase):
    """Tests for the new endpoint to retrieve a summary for
    the requestd ligands.
    """

    ligIds = ["AAA"]

    mock_ccad = MagicMock()
    mock_ccad.getAuthAssignmentKeys.return_value = ligIds
    mock_ccad.getCcName.return_value = None
    mock_ccad.getCcFormula.return_value = "C1C"
    mock_ccad.getAuthAssignment.return_value = "AAA"
    mock_ccad.getBatchBestHitId.return_value = "AAA"

    def setUp(self):
        self.__verbose = False
        self.__lfh = sys.stderr
        #
        # Create a request object and session directories for test cases
        #
        self.__cI = ConfigInfo("PDBE_DEV")

        self.__reqObj = InputRequest(paramDict={}, verbose=self.__verbose, log=self.__lfh)
        self.__reqObj.setValue("WWPDB_SITE_ID", "PDBE_DEV")
        self.__reqObj.setValue("TopSessionPath", self.__cI.get("SITE_WEB_APPS_TOP_SESSIONS_PATH"))
        self.__reqObj.setValue("TopPath", Path(PathInfo().getDepositPath("D_800001")).parent.parent)
        self.__reqObj.setValue("identifier", "D_800001")

        self.__depositPath = Path(PathInfo().getDepositPath("D_800001")).parent

    def testLigSummaryDict(self):
        matching_ligand = {
            "AAA": {
                "totlInstncsInGrp": 1,
                "bGrpRequiresAttention": False,
                "bGrpMismatchAddressed": False,
                "grpMismatchCnt": 0,
                "mismatchLst": [],
                "instIdLst": self.ligIds,
                "ccName": None,
                "ccFormula": "C1C",
                "isResolved": False,
            }
        }

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        return_dict = stw._generateLigGroupSummaryDict(self.mock_ccad, self.ligIds)
        self.assertEqual(return_dict, matching_ligand)

    def testLigSummaryDictMismatch(self):
        matching_ligand = {
            "AAA": {
                "totlInstncsInGrp": 1,
                "bGrpRequiresAttention": True,
                "bGrpMismatchAddressed": False,
                "grpMismatchCnt": 1,
                "mismatchLst": ["AAA"],
                "instIdLst": self.ligIds,
                "ccName": None,
                "ccFormula": "C1C",
                "isResolved": False,
            }
        }

        self.mock_ccad.getBatchBestHitId.return_value = "AAB"

        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        return_dict = stw._generateLigGroupSummaryDict(self.mock_ccad, self.ligIds)
        self.assertEqual(return_dict, matching_ligand)

    def testLigSummaryDictInvalidLig(self):
        """Test the case when the user provides an invalid lig id"""
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        return_dict = stw._generateLigGroupSummaryDict(self.mock_ccad, ["CCC"])
        self.assertEqual(return_dict, {})

    @patch("wwpdb.apps.ccmodule.webapp.ChemCompWebAppLite.ChemCompAssignDataStore", autospec=True)
    def testGetLigandSummary(self, mock_ccda):
        mock_ccda.return_value.getAuthAssignmentKeys.return_value = self.ligIds
        mock_ccda.return_value.getCcName.return_value = None
        mock_ccda.return_value.getCcFormula.return_value = "C1C"
        mock_ccda.return_value.getAuthAssignment.return_value = "AAA"
        mock_ccda.return_value.getBatchBestHitId.return_value = "AAA"

        # empty lig id list
        self.__reqObj.setValue("ligids", "")
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)

        with self.assertRaises(InvalidLigandIdError):
            stw._getLigandInstancesData()

        # passing rubbish
        self.__reqObj.setValue("ligids", 'CLA,_"FFF`')
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        self.assertEqual(stw._getLigandInstancesData().get()["RETURN_STRING"], "{}")

        # more rubbish
        self.__reqObj.setValue("ligids", {})
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        self.assertEqual(stw._getLigandInstancesData().get()["RETURN_STRING"], "{}")

        # valid input
        self.__reqObj.setValue("ligids", "AAA")
        stw = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)
        json_summary = json.loads(stw._getLigandInstancesData().get()["RETURN_STRING"])

        self.assertEqual(json_summary["AAA"]["totlInstncsInGrp"], 1)
        self.assertEqual(json_summary["AAA"]["bGrpRequiresAttention"], False)
        self.assertEqual(json_summary["AAA"]["instIdLst"], ["AAA"])


class RunAnalysisTest(unittest.TestCase):
    """Tests for the endpoint that fires the ligand analysis
    workflow.
    """

    mock_ccad = MagicMock()

    def setUp(self):
        self.__verbose = False
        self.__lfh = sys.stderr

        self.__cI = ConfigInfo("PDBE_DEV")

        self.__reqObj = InputRequest(paramDict={}, verbose=self.__verbose, log=self.__lfh)
        self.__reqObj.setValue("WWPDB_SITE_ID", "PDBE_DEV")
        self.__reqObj.setValue("TopSessionPath", self.__cI.get("SITE_WEB_APPS_TOP_SESSIONS_PATH"))
        self.__reqObj.setValue("TopPath", Path(PathInfo().getDepositPath("D_800001")).parent.parent)
        self.__reqObj.setValue("identifier", "D_800001")

        self.__depositPath = Path(PathInfo().getDepositPath("D_800001")).parent
        self.chemCompApp = ChemCompWebAppLiteWorker(reqObj=self.__reqObj, verbose=self.__verbose, log=self.__lfh)

    @patch("wwpdb.apps.ccmodule.utils.LigandAnalysisState.WfDbApi")
    @patch("wwpdb.apps.ccmodule.webapp.ChemCompWebAppLite.WfDbApi")
    def testDepositionIds(self, mockWfDbApi, ligStateMockDb):
        mockWfDbApi.return_value.runUpdateSQL.return_value = 2

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = ""
        with self.assertRaises(InvalidDepositionIdError):
            self.chemCompApp._runAnalysis()

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = None
        with self.assertRaises(InvalidDepositionIdError):
            self.chemCompApp._runAnalysis()

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = 'D_"001'
        with self.assertRaises(InvalidDepositionIdError):
            self.chemCompApp._runAnalysis()

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = "D_80000W"
        with self.assertRaises(InvalidDepositionIdError):
            self.chemCompApp._runAnalysis()

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = "D_' drop status.communication;"
        with self.assertRaises(InvalidDepositionIdError):
            self.chemCompApp._runAnalysis()

        self.chemCompApp._ChemCompWebAppLiteWorker__depId = "D_800001"
        response = json.loads(self.chemCompApp._runAnalysis().get()["RETURN_STRING"])
        self.assertEqual(response["status"], "success")

    @patch("wwpdb.apps.ccmodule.utils.LigandAnalysisState.WfDbApi")
    @patch("wwpdb.apps.ccmodule.webapp.ChemCompWebAppLite.WfDbApi")
    def testWfDb(self, mockWfDbApi, ligStateMockDb):
        mockWfDbApi.return_value.isConnected.return_value = True
        mockWfDbApi.return_value.runUpdateSQL.return_value = 0
        self.chemCompApp._runAnalysis()

        mockWfDbApi.return_value.isConnected.return_value = True
        mockWfDbApi.return_value.runUpdateSQL.return_value = 1
        self.chemCompApp._ChemCompWebAppLiteWorker__depId = "D_800001"
        response = json.loads(self.chemCompApp._runAnalysis().get()["RETURN_STRING"])
        self.assertEqual(response["status"], "success")


if __name__ == "__main__":
    unittest.main()
