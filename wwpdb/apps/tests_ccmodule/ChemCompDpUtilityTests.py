##
# File:    ChemCompDpUtilityTests.py
# Date:    25-Feb-2021
#
# Updates:
# 25-Feb-2021 wmb Testing some ligand lite operations migrated to the backend
##

__docformat__ = "restructuredtext en"
__author__ = "Weslley Morellato Bueno"
__email__ = "wbueno@ebi.ac.uk"
__license__ = "Creative Commons Attribution 3.0 Unported"
__version__ = "V1.0"

import sys
import unittest
import os
import os.path
import shutil

from unittest.mock import MagicMock, patch
from subprocess import Popen

from wwpdb.apps.ccmodule.utils.ChemCompDpUtility import ChemCompDpUtility, ChemCompDpInputs
from wwpdb.apps.ccmodule.utils.ChemCompConfig import ChemCompConfig
from wwpdb.utils.session.WebRequest import InputRequest
from wwpdb.utils.config.ConfigInfo import ConfigInfo
from pathlib import Path
from wwpdb.io.locator.PathInfo import PathInfo

# mock config
communicate_config = {"return_value": ("a", "b")}

unittest.TestLoader.sortTestMethodsUsing = None


class ChemCompDpUtilityTests(unittest.TestCase):
    """This class tests the API for requesting files generated by
    the chemical components report.
    """

    @classmethod
    def setUpClass(cls):
        cls._verbose = False
        cls._lfh = sys.stderr

        cls.__standalone = True

        if cls.__standalone:

            cls.__mocks = []
            # Patch ChemCompConfig -> .get_site_cc_apps_path
            instance = MagicMock()
            instance.get_site_cc_apps_path.return_value = "Foo"
            cls.__mocks = [patch("wwpdb.apps.ccmodule.utils.ChemCompConfig.ConfigInfoAppCommon", instance)]

            instance1a = MagicMock()
            instance1a.get_site_refdata_top_cvs_sb_path.return_value = "somecomponents"
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompConfig.ConfigInfoAppCc", instance1a))

            instance2 = MagicMock()
            instance2.get = "Foo"
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompDpUtility.ConfigInfo", instance2))

            HERE = os.path.abspath(os.path.dirname(__file__))
            instance3 = MagicMock()
            instance3.get_site_web_apps_sessions_path = os.path.join(HERE, "test-output", "sessions")
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompDpUtility.ConfigInfoAppCommon", instance3))

            instance4 = MagicMock()
            instance4.get_site_annot_tools_path = os.path.join(HERE, "test-output", "tools")
            cls.__mocks.append(patch("wwpdb.utils.dp.RcsbDpUtility.ConfigInfoAppCommon", instance4))

            instance4a = MagicMock()
            instance4a.get_site_refdata_top_cvs_sb_path.return_value = "somecomponents"
            cls.__mocks.append(patch("wwpdb.utils.dp.RcsbDpUtility.ConfigInfoAppCc", instance4a))

            instance5 = MagicMock()
            instance5.return_value = True
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompDpUtility.ChemCompDpUtility._genImages", instance5))

            def c1(ccid):
                # Old hash
                return os.path.join(HERE, "test-output", "ligand-dict-v3", ccid[0], ccid, ccid + ".cif")

            instance6 = MagicMock()
            instance6.getFilePath().return_value = os.path.join(HERE, "test-output", "filename")
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompDpUtility.ChemRefPathInfo.getFilePath", side_effect=c1))

            def getdeppath(dataSetId):
                return os.path.join(HERE, "test-output", "deposit", dataSetId)

            # instance4.getDepositPath.side_effect=getdeppath
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.ChemCompDpUtility.PathInfo.getDepositPath", side_effect=getdeppath))
            cls.__mocks.append(patch("wwpdb.apps.ccmodule.utils.LigandAnalysisState.PathInfo.getDepositPath", side_effect=getdeppath))

            for mock in cls.__mocks:
                mock.start()

        # setting up developmnet environment
        os.environ["WWPDB_SITE_ID"] = "PDBE_DEV"

        cls._depId = "D_800004"
        cls._cI = ConfigInfo()
        cls._reqObj = InputRequest({}, cls._verbose, cls._lfh)
        cls._reqObj.setValue("WWPDB_SITE_ID", cls._cI.get("SITE_PREFIX"))
        cls._reqObj.setValue("TOP_WWPDB_SESSIONS_PATH", cls._cI.get("SITE_WEB_APPS_TOP_SESSIONS_PATH"))
        cls._reqObj.setValue("SessionsPath", cls._cI.get("SITE_WEB_APPS_SESSIONS_PATH"))
        cls._reqObj.setValue("identifier", cls._depId)

        cls._ccConfig = ChemCompConfig(cls._reqObj, cls._verbose, cls._lfh)

        cls._ccDpUtility = ChemCompDpUtility("D_800004", cls._verbose, cls._lfh)
        cls._setup_paths()

        # setting up class
        cls._ccAssignFile = os.path.join(os.path.dirname(__file__), "fixtures", "D_800004_cc-assign_P1.cif.V1")
        cls._testCcInstanceFilePath = os.path.join(os.path.dirname(__file__), "fixtures", "1_H_0G7_701_.cif")

        # shared between tests
        cls._fitTupleDict = {}
        cls._instId = "1_H_0G7_701_"
        cls._authAssignedId = "0G7"
        cls._fitTupleDict[cls._authAssignedId] = {
            "alignList": [],
            "masterAlignRef": None,
        }

    @classmethod
    def tearDownClassClass(cls):
        if cls.__standalone:
            for mock in cls.__mocks:
                mock.stop()

    @classmethod
    def _setup_paths(cls):
        """Create the required paths"""
        cls._ccDictPath = os.path.dirname(cls._ccDpUtility._ccRefPathInfo.getFilePath("0G7"))  # pylint: disable=protected-access

        if cls.__standalone:
            HERE = os.path.abspath(os.path.dirname(__file__))
            cls.__myDepositPath = Path(os.path.join(HERE, "test-output", "deposit", cls._depId))
        else:
            cls.__myDepositPath = Path(PathInfo().getDepositPath(cls._depId))
        cls._ccReportPath = os.path.join(cls.__myDepositPath, ChemCompDpUtility._CC_REPORT_DIR)  # pylint: disable=protected-access
        cls._depositAssignPath = os.path.join(cls.__myDepositPath, ChemCompDpUtility._CC_ASSIGN_DIR)  # pylint: disable=protected-access

        os.makedirs(cls._ccDictPath, exist_ok=True)
        os.makedirs(cls.__myDepositPath, exist_ok=True)
        os.makedirs(cls._ccReportPath, exist_ok=True)
        os.makedirs(cls._depositAssignPath, exist_ok=True)

    def test_process_cc_assign(self):
        # missing cc assign file
        with self.assertRaises(RuntimeError):
            self._ccDpUtility._processCcAssignFile()  # pylint: disable=protected-access

        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, "/tmp/foobar")
        with self.assertRaises(IOError):
            self._ccDpUtility._processCcAssignFile()  # pylint: disable=protected-access

    def test_gen_report_data(self):
        # testing experimental instance reports
        self._ccDpUtility._genLigandReportData(self._instId, self._testCcInstanceFilePath, "exp")  # pylint: disable=protected-access

        repPath = os.path.join(self._ccReportPath, self._instId, "report")
        self.assertTrue(os.path.exists(os.path.join(repPath, "{}.cif".format(self._instId))))
        if not self.__standalone:
            self.assertTrue(os.path.exists(os.path.join(repPath, "report.log")))

        if not self.__standalone:
            with self.assertRaises(Exception):
                # just expect a generic exception
                self._ccDpUtility._genLigandReportData(self._instId, "/fake/path", "exp")  # pylint: disable=protected-access

        # testing reference reports

        self._ccDpUtility._genLigandReportData(self._authAssignedId, None, "ref")  # pylint: disable=protected-access

        repPath = os.path.join(self._ccReportPath, "rfrnc_reports", self._authAssignedId)
        if not self.__standalone:
            self.assertTrue(os.path.exists(os.path.join(repPath, "report.log")))

        if not self.__standalone:
            with self.assertRaises(Exception):
                # just expect a generic exception
                self._ccDpUtility._genLigandReportData("---", None, "ref")  # pylint: disable=protected-access

    def test_A_imaging_setup(self):
        open(os.path.join(self._ccDictPath, "0G7.cif"), "w").close()

        outputTuple = (
            "1_H_0G7_701_",
            os.path.join(self._depositAssignPath, "1_H_0G7_701_", "1_H_0G7_701_.cif"),
            os.path.join(self._ccReportPath, "1_H_0G7_701_.svg"),
        )

        instanceChemCompFilePath = os.path.join(self._depositAssignPath, self._instId, self._instId + ".cif")
        self._ccDpUtility._imagingSetupForLigandInstance(self._instId, self._authAssignedId, self._fitTupleDict, instanceChemCompFilePath)  # pylint: disable=protected-access
        self.assertEqual(self._fitTupleDict[self._authAssignedId]["masterAlignRef"], outputTuple)

    def test_B_imaging_setup(self):
        fpath = self._ccDpUtility._ccRefPathInfo.getFilePath("0G7")  # pylint: disable=protected-access
        outputTuple = ("0G7", fpath, os.path.join(self._ccReportPath, "0G7.svg"))

        self._ccDpUtility._imagingSetupForTopHit(self._authAssignedId, self._authAssignedId, self._fitTupleDict)  # pylint: disable=protected-access
        self.assertEqual(self._fitTupleDict[self._authAssignedId]["alignList"][0], outputTuple)

    def test_write_align_file_list(self):
        original = ""
        generated = ""
        fileListPath = os.path.join(self._ccReportPath, "alignfilelist_{}.txt".format(self._authAssignedId))

        self._ccDpUtility._createAlignFileList(self._authAssignedId, fileListPath, self._fitTupleDict)  # pylint: disable=protected-access

        with open(os.path.join(os.path.dirname(__file__), "fixtures", "alignfilelist_0G7.txt")) as f:
            original = f.read()

        with open(os.path.join(self._ccReportPath, "alignfilelist_0G7.txt")) as f:
            generated = f.read()

        # Adjust paths in files
        new_orig = original.replace("/nfs/msd/services/onedep/data/development/deposit", str(self.__myDepositPath.parent))
        new_orig = new_orig.replace("/nfs/msd/services/onedep/deployments/development/reference/components/ligand-dict-v3",
                                    os.path.join(os.path.dirname(__file__), "test-output/ligand-dict-v3"))

        self.assertEqual(new_orig, generated)

    def test_copy_file_util(self):
        open(os.path.join(self._ccDictPath, "test-sketch.sdf"), "w").close()
        dstPath = os.path.join(self._ccReportPath, "test-sketch.sdf")

        self._ccDpUtility._copyFileToReportDir(os.path.join(self._ccDictPath, "test-sketch.sdf"), dstPath)  # pylint: disable=protected-access
        self.assertTrue(os.path.exists(dstPath))

        with self.assertRaises(IOError):
            self._ccDpUtility._copyFileToReportDir(os.path.join(self._ccDictPath, "test-sketch.sdf1"), dstPath)  # pylint: disable=protected-access

    @patch.object(Popen, "communicate", **communicate_config)
    def test_gen_images(self, mock_popen):
        self._ccDpUtility._verbose = True  # pylint: disable=protected-access
        shutil.copyfile(os.path.join(os.path.dirname(__file__), "fixtures", "1_H_0G7_701_.svg"), os.path.join(self._ccReportPath, "1_H_0G7_701_.svg"))

        # tupleDict = {
        #     "0G7": {
        #         "alignList": [
        #             (self._authAssignedId, os.path.join(self._ccConfig.getPath("chemCompCachePath"), "0", "0G7", "0G7.cif"), os.path.join(self._ccReportPath, "0G7.svg"))
        #         ],
        #         "masterAlignRef": (self._instId, os.path.join(self._depositAssignPath, "1_H_0G7_701_", "1_H_0G7_701_.cif"), os.path.join(self._ccReportPath, "1_H_0G7_701_.svg")),
        #     }
        # }

        self._ccDpUtility._genAligned2dImages(self._fitTupleDict)  # pylint: disable=protected-access

        if not self.__standalone:
            # imgPath = os.path.join(self._ccReportPath, "{}.svg".format(self._instId))
            self.assertTrue(mock_popen.called)

            # imgPath = os.path.join(self._ccReportPath, "{}.svg".format(self._authAssignedId))
            self.assertTrue(mock_popen.called)

    @unittest.skip
    def test_do_analysis(self):
        self._ccDpUtility.addInput(ChemCompDpInputs.FILE_CC_ASSIGN, self._ccAssignFile)
        self._ccDpUtility.doAnalysis()


if __name__ == "__main__":
    unittest.main()
